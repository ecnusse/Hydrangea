app: babyagi
repo: https://github.com/yoheinakajima/babyagi
commit: 3532f987744e9254afacc254e3325d1910c0651d
defect_id: yoheinakajima-babyagi-insufficient_history_management-case3
type: insufficient history management
case: '3'
consequence:
- IC
locations:
- babyagi/babyagi.py/task_creation_agent()
trigger_tests:
- '1.Clone the repository via git clone https://github.com/yoheinakajima/babyagi.git and cd into the cloned repository.

  2.Install the required packages: pip install -r requirements.txt

  3.Copy the .env.example file to .env: cp .env.example .env. This is where you will set the following variables.

  4.Set your OpenAI API key in the OPENAI_API_KEY and OPENAI_API_MODEL variables. In order to use with Weaviate you will also need to setup additional variables detailed here.

  5.Set the name of the table where the task results will be stored in the TABLE_NAME variable.

  6.(Optional) Set the name of the BabyAGI instance in the BABY_NAME variable.

  7.Set the OBJECTIVE variable as "Have a fun day."

  8.Set the FIRST_TASK variable as "1.Make a list of tasks".

  9.Run the script: python babyagi.py

  10.After several rounds of task generation, check whether the newly generated task lists ignore the preceding task results.

  Example:

  Task 5 execution result: "I will organize a movie marathon with my friends. I will
  pick a theme or genre, gather a selection of movies, prepare some popcorn and snacks..."

  Actual generated tasks:

  Host a game night with your friends

  Host a DIY craft night with your friends

  Plan a picnic in the park with your friends

  Defect:

  The system should generate follow-up tasks related to the movie marathon planning,
  but instead generates unrelated generic social activities.'
