app: BabyCommandAGI
repo: https://github.com/saten-private/BabyCommandAGI
commit: 993f7075479d4d89948410bfec0c4c18d4a06b0c
defect_id: saten-private-BabyCommandAGI-insufficient_history_management-case3
type: insufficient history management
case: '3'
consequence:
- IC
locations:
- classic/babyagi.py/task_creation_agent()
trigger_tests:
- '1.Clone the repository via git clone https://github.com/saten-private/BabyCommandAGI.git and cd into the cloned repository.

  2.Install the required packages: pip install -r requirements.txt

  3.Copy the .env.example file to .env: cp .env.example .env. This is where you will set the following variables.

  4.Set your OpenAI API key in the OPENAI_API_KEY and OPENAI_API_MODEL variables. In order to use with Pinecone
  you will also need to setup additional variables detailed here.

  5.Set the name of the table where the task results will be stored in the TABLE_NAME variable.

  6.(Optional) Set the name of the BabyAGI instance in the BABY_NAME variable.

  7.Set the OBJECTIVE variable as "Have a fun day."

  8.Set the INITIAL_TASK variable as "1.Make a list of tasks".

  9.Run the script: python babyagi.py

  1.Clone the repository via git clone https://github.com/saten-private/BabyCommandAGI.git and cd into the cloned repository.

  2.Install the required packages: pip install -r requirements.txt

  3.Copy the .env.example file to .env: cp .env.example .env. This is where you will set the following variables.

  4.Set your OpenAI API key in the OPENAI_API_KEY and OPENAI_API_MODEL variables. In order to use with Pinecone
  you will also need to setup additional variables detailed here.

  5.Set the name of the table where the task results will be stored in the YOUR_TABLE_NAME variable.

  6.(Optional) Set the name of the BabyAGI instance in the BABY_NAME variable.

  7.(Optional) Set the OBJECTIVE variable as "Have a fun day"

  8.(Optional) Set the YOUR_FIRST_TASK variable. as "Develop a task list"

  9.Run the script: python classic/babyagi.py

  10.After several rounds of task generation, check whether the newly generated task lists ignore the preceding task results.

  Example:

  *****TASK RESULT*****

  I will go for a leisurely stroll around my neighborhood or local park to soak in
  the sights and sounds of the outdoors and get some fresh air. Thank you for the
  suggestion!

  *****TASK LIST*****

  Task 12: Host a virtual dance party with friends or family members over video call
  to spread joy and have a fun time together.

  Task 13: Have a karaoke session at home singing along to your favorite songs to
  unleash your inner rockstar.

  Task 25: Join a virtual Zumba class to shake and groove your way to a fun and energetic
  workout session.

  Task 26: Have a spontaneous dance party in your living room with your favorite upbeat
  tunes to lift your spirits and get your body moving.

  Observation: In this example, the TASK RESULT is totally ignored, and the TASK LIST
  just keeps adding new activities without adjusting based on the previous execution
  result.'
